import random
import time
import sys

# ---------------------------------------
# KLASA POSTACI
# ---------------------------------------

class Character:
    def __init__(self, name, hp, attack, defense, inventory=None, level=1, exp=0):
        self.name = name
        self.max_hp = hp
        self.hp = hp
        self.attack = attack
        self.defense = defense
        self.inventory = inventory if inventory else []
        self.level = level
        self.exp = exp

    def is_alive(self):
        return self.hp > 0

    def take_damage(self, damage):
        damage_taken = max(0, damage - self.defense)
        self.hp -= damage_taken
        print(f"{self.name} otrzymuje {damage_taken} obrażeń! (HP: {self.hp}/{self.max_hp})")
        return damage_taken

    def attack_enemy(self, enemy):
        damage = random.randint(self.attack - 2, self.attack + 2)
        print(f"{self.name} atakuje {enemy.name} za {damage} obrażeń!")
        return enemy.take_damage(damage)

    def gain_exp(self, amount):
        print(f"{self.name} zdobywa {amount} EXP.")
        self.exp += amount
        while self.exp >= self.level * 100:
            self.exp -= self.level * 100
            self.level_up()

    def level_up(self):
        self.level += 1
        self.max_hp += 10
        self.attack += 2
        self.defense += 1
        self.hp = self.max_hp
        print(f"{self.name} awansuje na poziom {self.level}! Statystyki zwiększone.")

    def use_item(self, item_name):
        for item in self.inventory:
            if item.name == item_name:
                print(f"{self.name} używa przedmiotu: {item.name}.")
                item.apply(self)
                self.inventory.remove(item)
                return True
        print(f"{item_name} nie znajduje się w ekwipunku.")
        return False

    def show_inventory(self):
        print("Ekwipunek:")
        if not self.inventory:
            print(" (pusty)")
        for item in self.inventory:
            print(f" - {item.name}: {item.description}")


# ---------------------------------------
# KLASA PRZEDMIOTÓW
# ---------------------------------------

class Item:
    def __init__(self, name, description, effect_function):
        self.name = name
        self.description = description
        self.effect_function = effect_function

    def apply(self, target):
        self.effect_function(target)


# ---------------------------------------
# FUNKCJE POMOCNICZE
# ---------------------------------------

def heal_20(character):
    heal_amount = min(20, character.max_hp - character.hp)
    character.hp += heal_amount
    print(f"{character.name} leczy się o {heal_amount} punktów HP.")

def create_basic_items():
    potion = Item("Mikstura Leczenia", "Leczy 20 punktów HP", heal_20)
    return [potion]


# ---------------------------------------
# KLASA POTWORÓW
# ---------------------------------------

class Monster(Character):
    def __init__(self, name, hp, attack, defense, exp_reward):
        super().__init__(name, hp, attack, defense)
        self.exp_reward = exp_reward


# ---------------------------------------
# WALKA
# ---------------------------------------

def fight(player, monster):
    print(f"\n--- WALKA: {player.name} VS {monster.name} ---")
    while player.is_alive() and monster.is_alive():
        input("Naciśnij ENTER, aby zaatakować...")
        player.attack_enemy(monster)
        if monster.is_alive():
            monster.attack_enemy(player)
    if player.is_alive():
        print(f"{player.name} pokonał {monster.name}!")
        player.gain_exp(monster.exp_reward)
        return True
    else:
        print(f"{player.name} został pokonany przez {monster.name}...")
        return False

# ---------------------------------------
# KLASA LOKACJI
# ---------------------------------------

class Location:
    def __init__(self, name, description, enemies=None, items=None, connected=None, quest=None):
        self.name = name
        self.description = description
        self.enemies = enemies if enemies else []
        self.items = items if items else []
        self.connected = connected if connected else {}
        self.quest = quest

    def show_info(self):
        print(f"\n🗺️ Lokacja: {self.name}")
        print(self.description)
        if self.enemies:
            print("Wrogowie w okolicy: " + ", ".join(e.name for e in self.enemies))
        if self.items:
            print("Znalezione przedmioty: " + ", ".join(i.name for i in self.items))
        if self.quest:
            print(f"Zadanie dostępne: {self.quest.name}")

# ---------------------------------------
# KLASA ZADAŃ
# ---------------------------------------

class Quest:
    def __init__(self, name, description, requirement, reward):
        self.name = name
        self.description = description
        self.requirement = requirement  # funkcja warunkowa
        self.reward = reward            # funkcja nagrody
        self.completed = False

    def try_complete(self, player):
        if not self.completed and self.requirement(player):
            print(f"\n✅ Zadanie ukończone: {self.name}")
            self.reward(player)
            self.completed = True
            return True
        return False

# ---------------------------------------
# MAPA
# ---------------------------------------

def create_world():
    # Lokacje
    village = Location(
        "Wioska Startowa",
        "Mała wioska z kilkoma domkami i ogniskiem.",
        items=create_basic_items()
    )
    forest = Location(
        "Mroczny Las",
        "Gęsty, ciemny las pełen dziwnych dźwięków.",
        enemies=[Monster("Wilk", 20, 5, 1, 30)],
    )
    cave = Location(
        "Jaskinia Cieni",
        "Wilgotna, zimna jaskinia z echem potworów.",
        enemies=[Monster("Goblin", 30, 7, 2, 50)],
    )

    # Połączenia
    village.connected = {"las": forest}
    forest.connected = {"wioska": village, "jaskinia": cave}
    cave.connected = {"las": forest}

    # Zadanie w wiosce
    def requirement_kill_wolf(player):
        return player.level >= 2

    def reward_healing(player):
        potion = Item("Mocna Mikstura", "Leczy 50 HP", lambda c: setattr(c, 'hp', min(c.max_hp, c.hp + 50)))
        player.inventory.append(potion)
        print("Otrzymano: Mocna Mikstura!")

    village.quest = Quest(
        "Zostań Bohaterem Wioski",
        "Pokonaj wroga w lesie i osiągnij poziom 2.",
        requirement_kill_wolf,
        reward_healing
    )

    return village  # początkowa lokacja

# ---------------------------------------
# EKSPLORACJA
# ---------------------------------------

def explore(player, location):
    while True:
        location.show_info()
        if location.quest and not location.quest.completed:
            print(f"Zadanie dostępne: {location.quest.name} - {location.quest.description}")
        print("\nCo chcesz zrobić?")
        print("1. Przeszukaj okolicę")
        print("2. Walcz z potworem")
        print("3. Przejdź do innej lokacji")
        print("4. Ekwipunek")
        print("5. Użyj przedmiotu")
        print("6. Sprawdź statystyki")
        print("7. Zakończ grę")

        choice = input("Wybór: ")
        if choice == "1":
            if location.items:
                item = location.items.pop()
                player.inventory.append(item)
                print(f"Znalazłeś: {item.name}!")
            else:
                print("Nic ciekawego nie znalazłeś.")
        elif choice == "2":
            if location.enemies:
                monster = random.choice(location.enemies)
                if fight(player, monster):
                    location.enemies.remove(monster)
                    if location.quest:
                        location.quest.try_complete(player)
                if not player.is_alive():
                    print("Koniec gry.")
                    sys.exit()
            else:
                print("Nie ma tu żadnych wrogów.")
        elif choice == "3":
            if location.connected:
                print("Dostępne kierunki:")
                for key in location.connected:
                    print(f"- {key}")
                dest = input("Gdzie chcesz się udać? ").lower()
                if dest in location.connected:
                    return location.connected[dest]
                else:
                    print("Nie możesz tam pójść.")
            else:
                print("Brak przejść z tej lokacji.")
        elif choice == "4":
            player.show_inventory()
        elif choice == "5":
            item_name = input("Nazwa przedmiotu do użycia: ")
            player.use_item(item_name)
        elif choice == "6":
            print(f"\n👤 {player.name} - Poziom {player.level}")
            print(f"HP: {player.hp}/{player.max_hp} | ATK: {player.attack} | DEF: {player.defense}")
            print(f"EXP: {player.exp}/{player.level * 100}")
        elif choice == "7":
            print("Dziękujemy za grę!")
            sys.exit()
        else:
            print("Nieznana komenda.")


# ---------------------------------------
# DIALOGI I POSTACIE NPC
# ---------------------------------------

class NPC:
    def __init__(self, name, dialog_lines, quest=None):
        self.name = name
        self.dialog_lines = dialog_lines
        self.quest = quest
        self.dialog_index = 0

    def talk(self, player):
        if self.dialog_index < len(self.dialog_lines):
            print(f"\n{self.name} mówi: \"{self.dialog_lines[self.dialog_index]}\"")
            self.dialog_index += 1
        else:
            print(f"{self.name} nie ma nic więcej do powiedzenia.")
        if self.quest and not self.quest.completed:
            if self.quest.try_complete(player):
                print(f"{self.name}: Dziękuję za pomoc!")

def add_npc_to_location(location, npc):
    if not hasattr(location, 'npcs'):
        location.npcs = []
    location.npcs.append(npc)

def interact_with_npc(location, player):
    if hasattr(location, 'npcs') and location.npcs:
        print("\nDostępni NPC:")
        for idx, npc in enumerate(location.npcs):
            print(f"{idx + 1}. {npc.name}")
        choice = input("Wybierz NPC do rozmowy (numer): ")
        if choice.isdigit():
            index = int(choice) - 1
            if 0 <= index < len(location.npcs):
                npc = location.npcs[index]
                npc.talk(player)
            else:
                print("Nie ma takiego NPC.")
        else:
            print("Niepoprawny wybór.")
    else:
        print("Nie ma tu nikogo do rozmowy.")

# ---------------------------------------
# WIĘCEJ POTWORÓW
# ---------------------------------------

def generate_monster(name):
    stats = {
        "Szkielet": (25, 6, 2, 40),
        "Ork": (40, 10, 3, 70),
        "Nietoperz": (15, 4, 1, 20),
        "Demon": (80, 15, 5, 150)
    }
    if name in stats:
        hp, atk, defn, exp = stats[name]
        return Monster(name, hp, atk, defn, exp)
    else:
        return Monster("Potwór", 20, 5, 1, 25)

# ---------------------------------------
# TWORZENIE ŚWIATA Z NPC
# ---------------------------------------

def build_full_world():
    start = create_world()
    forest = start.connected["las"]
    cave = forest.connected["jaskinia"]

    # Dodajemy NPC do wioski
    def quest_condition(player):
        return any(item.name == "Ząb Wilka" for item in player.inventory)

    def reward_npc(player):
        print("Otrzymujesz 100 złota (niewidoczna waluta 😅) i szacunek mieszkańców.")
        player.gain_exp(50)

    npc_quest = Quest(
        "Ząb Wilka",
        "Przynieś ząb wilka jako dowód pokonania bestii.",
        quest_condition,
        reward_npc
    )

    elder = NPC(
        "Stary Mędrzec",
        [
            "Witaj, młody podróżniku.",
            "Las skrywa wiele tajemnic...",
            "Uważaj na stworzenia w jaskini."
        ],
        npc_quest
    )
    add_npc_to_location(start, elder)

    # Dodajemy nowe lokacje i potwory
    tower = Location(
        "Wieża Maga",
        "Zrujnowana wieża, w której kiedyś mieszkał wielki czarodziej.",
        enemies=[generate_monster("Szkielet"), generate_monster("Nietoperz")]
    )
    fortress = Location(
        "Twierdza Cierni",
        "Starożytna twierdza zamieszkiwana przez potężnego demona.",
        enemies=[generate_monster("Demon")]
    )

    cave.connected["wieża"] = tower
    tower.connected["jaskinia"] = cave
    tower.connected["twierdza"] = fortress
    fortress.connected["wieża"] = tower

    return start

# ---------------------------------------
# START GRY
# ---------------------------------------

def start_game():
    print("===================================")
    print("       WITAJ W TEKSTOWYM RPG       ")
    print("===================================")
    name = input("Podaj imię swojej postaci: ")
    player = Character(name, 100, 10, 3, inventory=create_basic_items())
    current_location = build_full_world()

    print(f"\nWitaj, {player.name}! Twoja przygoda się zaczyna...\n")
    while True:
        current_location = explore(player, current_location)
        if hasattr(current_location, 'npcs'):
            interact_with_npc(current_location, player)

# ---------------------------------------
# URUCHOMIENIE GRY
# ---------------------------------------

if __name__ == "__main__":
    start_game()


# ---------------------------------------
# CRAFTING
# ---------------------------------------

class Recipe:
    def __init__(self, name, ingredients, result):
        self.name = name
        self.ingredients = ingredients  # list of item names
        self.result = result  # Item instance

def craft(player, recipes):
    print("\n📦 Dostępne przepisy:")
    for i, recipe in enumerate(recipes):
        print(f"{i + 1}. {recipe.name} - składniki: {', '.join(recipe.ingredients)}")
    choice = input("Wybierz numer przepisu do stworzenia (lub ENTER, aby wyjść): ")
    if not choice.strip():
        return
    if choice.isdigit():
        index = int(choice) - 1
        if 0 <= index < len(recipes):
            recipe = recipes[index]
            inventory_names = [item.name for item in player.inventory]
            if all(recipe.ingredients.count(ing) <= inventory_names.count(ing) for ing in recipe.ingredients):
                # usuń składniki
                for ing in recipe.ingredients:
                    for item in player.inventory:
                        if item.name == ing:
                            player.inventory.remove(item)
                            break
                # dodaj wynik
                player.inventory.append(recipe.result)
                print(f"Utworzono: {recipe.result.name}")
            else:
                print("Brakuje składników!")
        else:
            print("Nieprawidłowy wybór.")
    else:
        print("Błąd formatu.")

def create_recipes():
    super_potion = Item("Super Mikstura", "Leczy 80 HP", lambda c: setattr(c, 'hp', min(c.max_hp, c.hp + 80)))
    return [
        Recipe("Super Mikstura", ["Mikstura Leczenia", "Mikstura Leczenia"], super_potion)
    ]

# ---------------------------------------
# DRUŻYNA
# ---------------------------------------

class Ally(Character):
    def __init__(self, name, hp, attack, defense):
        super().__init__(name, hp, attack, defense)

def group_fight(player, allies, monster):
    print(f"\n🤝 WALKA DRUŻYNOWA: {player.name} + sojusznicy VS {monster.name}")
    while player.is_alive() and monster.is_alive():
        input("ENTER, aby rozpocząć turę walki...")
        participants = [player] + allies
        for member in participants:
            if monster.is_alive():
                member.attack_enemy(monster)
        if monster.is_alive():
            target = random.choice(participants)
            monster.attack_enemy(target)
        if not player.is_alive():
            print("Gracz poległ. Koniec gry.")
            sys.exit()
    print(f"{monster.name} został pokonany!")
    player.gain_exp(monster.exp_reward)

# ---------------------------------------
# NOWE ZADANIE Z CRAFTINGU
# ---------------------------------------

def create_crafting_quest():
    def condition(player):
        return any(item.name == "Super Mikstura" for item in player.inventory)
    
    def reward(player):
        player.gain_exp(75)
        print("Nagroda: 75 EXP i szacunek alchemików.")

    return Quest(
        "Tajemna Mikstura",
        "Stwórz Super Miksturę poprzez crafting.",
        condition,
        reward
    )

# ---------------------------------------
# DODANIE NOWEJ LOKACJI I SOJUSZNIKÓW
# ---------------------------------------

def extend_world_with_tower(start_location):
    tower = start_location.connected["las"].connected["jaskinia"].connected["wieża"]
    lab = Location(
        "Laboratorium Alchemika",
        "Stare laboratorium pełne mikstur i dziwnych urządzeń.",
        items=[Item("Mikstura Leczenia", "Leczy 20 HP", heal_20)]
    )
    tower.connected["laboratorium"] = lab
    lab.connected["wieża"] = tower

    alchemist = NPC(
        "Stary Alchemik",
        [
            "Przybyłeś, by poznać tajemnice mikstur?",
            "Zbieraj składniki i próbuj tworzyć coś nowego..."
        ],
        create_crafting_quest()
    )
    add_npc_to_location(lab, alchemist)

    # Sojusznik
    companion = Ally("Strażnik Wieży", 80, 12, 4)
    lab.ally = companion

# ---------------------------------------
# ZMIANY W EKSPLORACJI DLA CRAFTINGU I SOJUSZNIKA
# ---------------------------------------

def explore(player, location):
    recipes = create_recipes()
    ally_added = False

    while True:
        location.show_info()
        if hasattr(location, 'npcs'):
            print("NPC są dostępni.")
        if hasattr(location, 'ally') and not ally_added:
            print(f"Sojusznik {location.ally.name} dołącza do drużyny!")
            ally = location.ally
            ally_added = True
        else:
            ally = None

        print("\nCo chcesz zrobić?")
        print("1. Przeszukaj okolicę")
        print("2. Walcz z potworem")
        print("3. Przejdź do innej lokacji")
        print("4. Ekwipunek")
        print("5. Użyj przedmiotu")
        print("6. Sprawdź statystyki")
        print("7. Porozmawiaj z NPC")
        print("8. Crafting")
        print("9. Zakończ grę")

        choice = input("Wybór: ")
        if choice == "1":
            if location.items:
                item = location.items.pop()
                player.inventory.append(item)
                print(f"Znalazłeś: {item.name}!")
            else:
                print("Nic ciekawego nie znalazłeś.")
        elif choice == "2":
            if location.enemies:
                monster = random.choice(location.enemies)
                if ally:
                    group_fight(player, [ally], monster)
                else:
                    fight(player, monster)
                location.enemies.remove(monster)
            else:
                print("Nie ma tu żadnych wrogów.")
        elif choice == "3":
            if location.connected:
                print("Dostępne przejścia:")
                for key in location.connected:
                    print(f"- {key}")
                dest = input("Dokąd idziesz? ").lower()
                if dest in location.connected:
                    return location.connected[dest]
                else:
                    print("Nie możesz tam pójść.")
            else:
                print("Brak przejść.")
        elif choice == "4":
            player.show_inventory()
        elif choice == "5":
            item_name = input("Nazwa przedmiotu do użycia: ")
            player.use_item(item_name)
        elif choice == "6":
            print(f"{player.name} - Poziom {player.level} | HP: {player.hp}/{player.max_hp}")
            print(f"ATK: {player.attack}, DEF: {player.defense}, EXP: {player.exp}/{player.level * 100}")
        elif choice == "7":
            interact_with_npc(location, player)
        elif choice == "8":
            craft(player, recipes)
        elif choice == "9":
            print("Do zobaczenia!")
            sys.exit()
        else:
            print("Nieznana komenda.")


# ---------------------------------------
# BOSS I FINAŁ
# ---------------------------------------

class FinalBoss(Monster):
    def __init__(self):
        super().__init__("Król Demonów", 200, 20, 10, 500)

def add_final_boss_area(start_location):
    fortress = start_location.connected["las"].connected["jaskinia"].connected["wieża"].connected["twierdza"]
    throne = Location(
        "Sala Tronowa",
        "Mroczna komnata, w której czeka Król Demonów. To miejsce przesycone jest złem.",
        enemies=[FinalBoss()]
    )
    fortress.connected["tron"] = throne
    throne.connected["twierdza"] = fortress
    return throne

# ---------------------------------------
# SYSTEM ZAKOŃCZEŃ
# ---------------------------------------

def check_ending(player):
    print("\n🎉 Gratulacje! Pokonałeś Króla Demonów i oczyściłeś krainę ze zła.")
    print("Twoje osiągnięcia:")
    print(f"- Poziom: {player.level}")
    print(f"- EXP: {player.exp}")
    print(f"- Liczba przedmiotów w ekwipunku: {len(player.inventory)}")
    print(f"- Liczba ukończonych zadań: {sum(1 for quest in completed_quests if quest)}")

    if player.level >= 6:
        print("\n🏆 Zakończenie: Bohater Legendarny")
        print("Twoje imię będzie wspominane przez pokolenia.")
    elif player.level >= 4:
        print("\n🏆 Zakończenie: Obrońca Krainy")
        print("Oczyściłeś ziemie, ale czeka Cię jeszcze wiele przygód.")
    else:
        print("\n🏆 Zakończenie: Niedoszły Bohater")
        print("Udało się... ale z trudem. Twoja legenda dopiero się tworzy.")

    print("\nDziękujemy za grę!")

# ---------------------------------------
# ZMIANY W explore() DLA FINAŁU
# ---------------------------------------

completed_quests = []

def explore(player, location):
    recipes = create_recipes()
    ally_added = False
    ally = None

    while True:
        location.show_info()
        if hasattr(location, 'npcs'):
            print("NPC są dostępni.")
        if hasattr(location, 'ally') and not ally_added:
            print(f"Sojusznik {location.ally.name} dołącza do drużyny!")
            ally = location.ally
            ally_added = True

        print("\nCo chcesz zrobić?")
        print("1. Przeszukaj okolicę")
        print("2. Walcz z potworem")
        print("3. Przejdź do innej lokacji")
        print("4. Ekwipunek")
        print("5. Użyj przedmiotu")
        print("6. Statystyki")
        print("7. Rozmowa z NPC")
        print("8. Crafting")
        print("9. Zakończ grę")

        choice = input("Wybór: ")
        if choice == "1":
            if location.items:
                item = location.items.pop()
                player.inventory.append(item)
                print(f"Znalazłeś: {item.name}!")
            else:
                print("Nic nie znalazłeś.")
        elif choice == "2":
            if location.enemies:
                monster = location.enemies[0]
                print(f"🛡️ Walka z: {monster.name}")
                if isinstance(monster, FinalBoss):
                    if ally:
                        group_fight(player, [ally], monster)
                    else:
                        fight(player, monster)
                    if not monster.is_alive():
                        location.enemies.remove(monster)
                        check_ending(player)
                        sys.exit()
                else:
                    if ally:
                        group_fight(player, [ally], monster)
                    else:
                        fight(player, monster)
                    location.enemies.remove(monster)
            else:
                print("Brak wrogów.")
        elif choice == "3":
            if location.connected:
                print("Dostępne przejścia:")
                for key in location.connected:
                    print(f"- {key}")
                dest = input("Gdzie idziesz? ").lower()
                if dest in location.connected:
                    return location.connected[dest]
                else:
                    print("Nieznana lokacja.")
            else:
                print("Brak przejść.")
        elif choice == "4":
            player.show_inventory()
        elif choice == "5":
            item_name = input("Nazwa przedmiotu: ")
            player.use_item(item_name)
        elif choice == "6":
            print(f"{player.name} - Poziom {player.level} | HP: {player.hp}/{player.max_hp}")
            print(f"ATK: {player.attack}, DEF: {player.defense}, EXP: {player.exp}/{player.level * 100}")
        elif choice == "7":
            interact_with_npc(location, player)
        elif choice == "8":
            craft(player, recipes)
        elif choice == "9":
            print("Zakończono grę.")
            sys.exit()
        else:
            print("Niepoprawny wybór.")

# ---------------------------------------
# OSTATECZNE URUCHOMIENIE GRY
# ---------------------------------------

def start_game():
    print("===================================")
    print("       WITAJ W TEKSTOWYM RPG       ")
    print("===================================")
    name = input("Podaj imię bohatera: ")
    player = Character(name, 100, 10, 3, inventory=create_basic_items())
    current_location = build_full_world()
    extend_world_with_tower(current_location)
    final_area = add_final_boss_area(current_location)

    print(f"\nWitaj, {player.name}! Czeka Cię przygoda pełna niebezpieczeństw...\n")
    while True:
        current_location = explore(player, current_location)

if __name__ == "__main__":
    start_game()


# ---------------------------------------
# SYSTEM UZBROJENIA I ZBROI
# ---------------------------------------

class Equipment(Item):
    def __init__(self, name, description, slot, bonus_attack=0, bonus_defense=0):
        super().__init__(name, description)
        self.slot = slot  # "weapon" lub "armor"
        self.bonus_attack = bonus_attack
        self.bonus_defense = bonus_defense

def create_equipment_items():
    return [
        Equipment("Miecz Wojownika", "Silny miecz (+5 ATK)", "weapon", bonus_attack=5),
        Equipment("Topór Bitwy", "Ciężki topór (+8 ATK)", "weapon", bonus_attack=8),
        Equipment("Skórzana Zbroja", "Lekka zbroja (+3 DEF)", "armor", bonus_defense=3),
        Equipment("Pancerz Rycerza", "Ciężka zbroja (+6 DEF)", "armor", bonus_defense=6),
    ]

# Dodajemy nowy atrybut do postaci
Character.equipment = {"weapon": None, "armor": None}

def get_equipped_stats(player):
    bonus_atk = player.attack
    bonus_def = player.defense
    weapon = player.equipment["weapon"]
    armor = player.equipment["armor"]

    if weapon:
        bonus_atk += weapon.bonus_attack
    if armor:
        bonus_def += armor.bonus_defense

    return bonus_atk, bonus_def

# Modyfikacja metody ataku
def new_attack_enemy(self, enemy):
    atk, _ = get_equipped_stats(self)
    damage = max(atk - enemy.defense, 0)
    print(f"{self.name} atakuje {enemy.name} z siłą {atk}. Zadano {damage} obrażeń.")
    enemy.hp -= damage

Character.attack_enemy = new_attack_enemy

# Zmieniona walka potwora
def new_monster_attack(self, target):
    _, defn = get_equipped_stats(target)
    damage = max(self.attack - defn, 0)
    print(f"{self.name} atakuje {target.name} z siłą {self.attack}. Zadano {damage} obrażeń.")
    target.hp -= damage

Monster.attack_enemy = new_monster_attack

# ---------------------------------------
# EKWIPUNEK – ZAKŁADANIE PRZEDMIOTÓW
# ---------------------------------------

def equip_item(player):
    weapons = [item for item in player.inventory if isinstance(item, Equipment)]
    if not weapons:
        print("Nie masz żadnego sprzętu do założenia.")
        return

    print("\n🔧 Dostępne wyposażenie:")
    for i, item in enumerate(weapons):
        print(f"{i + 1}. {item.name} ({item.slot.upper()})")

    choice = input("Wybierz numer przedmiotu do założenia: ")
    if choice.isdigit():
        index = int(choice) - 1
        if 0 <= index < len(weapons):
            item = weapons[index]
            player.equipment[item.slot] = item
            print(f"{item.name} został założony jako {item.slot}.")
        else:
            print("Nieprawidłowy wybór.")
    else:
        print("Błędny format.")


# ---------------------------------------
# SYSTEM TALENTÓW (ZDOLNOŚCI)
# ---------------------------------------

class Talent:
    def __init__(self, name, description, effect):
        self.name = name
        self.description = description
        self.effect = effect  # funkcja wywoływana na postaci

def heal_boost(player):
    player.hp = min(player.max_hp, player.hp + 50)
    print(f"{player.name} używa zdolności: Leczenie (+50 HP)!")

def rage_boost(player):
    player.attack += 5
    print(f"{player.name} wpada w szał! ATK zwiększone o 5 na tę walkę.")

def create_talents():
    return [
        Talent("Szybkie Leczenie", "Natychmiastowo przywraca 50 HP", heal_boost),
        Talent("Szał Bojowy", "Zwiększa ATK o 5 na jedną walkę", rage_boost)
    ]

Character.talents = []
Character.used_talents = []

def use_talent(player):
    if not player.talents:
        print("Brak dostępnych talentów.")
        return
    print("\n🧠 Twoje zdolności:")
    for i, t in enumerate(player.talents):
        print(f"{i + 1}. {t.name} - {t.description}")
    choice = input("Wybierz talent do użycia: ")
    if choice.isdigit():
        index = int(choice) - 1
        if 0 <= index < len(player.talents):
            talent = player.talents[index]
            if talent.name in player.used_talents:
                print("Ten talent już został użyty w tej walce.")
            else:
                talent.effect(player)
                player.used_talents.append(talent.name)
        else:
            print("Nieprawidłowy wybór.")
    else:
        print("Błąd formatu.")

# Resetowanie użycia talentów po walce
def reset_talents(player):
    player.used_talents = []

# ---------------------------------------
# DZIENNIK POSTACI
# ---------------------------------------

Character.journal = []

def log_event(player, text):
    entry = f"[{time.strftime('%H:%M:%S')}] {text}"
    player.journal.append(entry)

def show_journal(player):
    print("\n📘 Dziennik postaci:")
    if not player.journal:
        print("Brak zapisanych wydarzeń.")
    else:
        for line in player.journal[-10:]:
            print(line)

# ---------------------------------------
# SYSTEM MINI-MAPY
# ---------------------------------------

Character.position = "start"

def show_map(player):
    print("\n🗺️ Mini-Mapa:")
    print(f"Obecna lokacja: {player.position}")
    print("Legenda: start, las, jaskinia, wieża, twierdza, tron")
    print("Poruszaj się po świecie i odkrywaj kolejne miejsca!")

# ---------------------------------------
# LOSOWE WYDARZENIA
# ---------------------------------------

def random_event(player):
    events = [
        "Spotykasz wędrowca, który daje ci miksturę.",
        "Napotykasz pułapkę – tracisz 10 HP!",
        "Odnajdujesz ukryty skarb – +100 EXP!",
        "Nic się nie wydarzyło..."
    ]
    choice = random.choice(events)
    print(f"🔮 Wydarzenie: {choice}")
    if "miksturę" in choice:
        player.inventory.append(HealingPotion())
    elif "pułapkę" in choice:
        player.hp = max(player.hp - 10, 0)
    elif "skarb" in choice:
        player.gain_exp(100)

# ---------------------------------------
# INTEGRACJA NOWYCH FUNKCJI DO explore()
# ---------------------------------------

def explore(player, location):
    recipes = create_recipes()
    ally_added = False
    ally = None

    player.position = location.name
    log_event(player, f"Odwiedzono lokację: {location.name}")
    random_event(player)

    while True:
        location.show_info()
        print("\nCo chcesz zrobić?")
        print("1. Przeszukaj okolicę")
        print("2. Walcz z potworem")
        print("3. Przejdź do innej lokacji")
        print("4. Ekwipunek")
        print("5. Użyj przedmiotu")
        print("6. Statystyki")
        print("7. Rozmowa z NPC")
        print("8. Crafting")
        print("9. Zdolność specjalna")
        print("10. Załóż sprzęt")
        print("11. Pokaż mapę")
        print("12. Dziennik")
        print("13. Zakończ grę")

        choice = input("Wybór: ")
        if choice == "1":
            if location.items:
                item = location.items.pop()
                player.inventory.append(item)
                print(f"Znalazłeś: {item.name}!")
                log_event(player, f"Znaleziono przedmiot: {item.name}")
            else:
                print("Nic nie znalazłeś.")
        elif choice == "2":
            if location.enemies:
                monster = location.enemies[0]
                print(f"🛡️ Walka z: {monster.name}")
                if ally:
                    group_fight(player, [ally], monster)
                else:
                    fight(player, monster)
                if not monster.is_alive():
                    location.enemies.remove(monster)
                    log_event(player, f"Pokonano potwora: {monster.name}")
                reset_talents(player)
            else:
                print("Brak wrogów.")
        elif choice == "3":
            if location.connected:
                print("Dostępne przejścia:")
                for key in location.connected:
                    print(f"- {key}")
                dest = input("Gdzie idziesz? ").lower()
                if dest in location.connected:
                    return location.connected[dest]
                else:
                    print("Nieznana lokacja.")
            else:
                print("Brak przejść.")
        elif choice == "4":
            player.show_inventory()
        elif choice == "5":
            item_name = input("Nazwa przedmiotu: ")
            player.use_item(item_name)
        elif choice == "6":
            atk, defn = get_equipped_stats(player)
            print(f"{player.name} - Poziom {player.level} | HP: {player.hp}/{player.max_hp}")
            print(f"ATK: {atk}, DEF: {defn}, EXP: {player.exp}/{player.level * 100}")
        elif choice == "7":
            interact_with_npc(location, player)
        elif choice == "8":
            craft(player, recipes)
        elif choice == "9":
            use_talent(player)
        elif choice == "10":
            equip_item(player)
        elif choice == "11":
            show_map(player)
        elif choice == "12":
            show_journal(player)
        elif choice == "13":
            print("Zakończono grę.")
            sys.exit()
        else:
            print("Niepoprawny wybór.")
